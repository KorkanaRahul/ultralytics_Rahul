# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 1 # number of classes

activation: nn.ReLU()



# After change:
# filters: 256
# size: 3
# stride: 2
# activation: nn.LeakyReLU(0.1)  # Changed to LeakyReLU activation function

scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.30, 0.20, 512] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs



# # YOLOv8.0n backbone
# backbone:
#   # [from, repeats, module, args]
#   - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, DWConv, [128, 3, 2]] # 1-P2/4
#   - [-1, 3, C2f, [128, True]] #2
#   - [-1, 1, DWConv, [256, 3, 2]] # 3-P3/8
#   - [-1, 6, C2f, [256, True]] #4
#   - [-1, 1, DWConv, [512, 3, 2]] # 5-P4/16
#   - [-1, 6, C2f, [512, True]] #6
#   - [-1, 1, DWConv, [1024, 3, 2]] # 7-P5/32
#   - [-1, 3, C2f, [1024, True]] #8
#   - [-1, 1, SPPF, [512, 5]] # 9


# # YOLOv8.0n head
# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #10
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4 #11
#   - [-1, 3, C2f, [512]] # 12

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #13
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3 #14
#   - [-1, 3, C2f, [256]] # 15 (P3/8-small)

#   - [-1, 1, DWConv, [256, 3, 2]] #16
#   - [[-1, 12], 1, Concat, [1]] # cat head P4 #17
#   - [-1, 3, C2f, [512]] # 18 (P4/16-medium)

#   - [-1, 1, DWConv, [512, 3, 2]] #19
#   - [[-1, 9], 1, Concat, [1]] # cat head P5 #20
#   - [-1, 3, C2f, [1024]] # 21 (P5/32-large)

#   - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5) #22



# # Modified DW with predifined modeules
# backbone:
#   - [-1, 1, RepVGGDW, [64]]  # More efficient than standard DWConv
#   - [-1, 1, RepVGGDW, [128]]
#   - [-1, 3, C2fAttn, [128, True]]  # Improved feature extraction with attention
#   - [-1, 1, RepVGGDW, [256]]
#   - [-1, 6, C2fCIB, [256, True]]  # Contrastive learning for better feature discrimination
#   - [-1, 1, RepVGGDW, [512]]
#   - [-1, 6, C3Ghost, [512, True]]  # Ghost-like efficiency
#   - [-1, 1, RepVGGDW, [1024]]
#   - [-1, 3, C2fAttn, [1024, True]]
#   - [-1, 1, SPPELAN, [1024, 5]]  # Stronger feature aggregation than SPPF

# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 6], 1, Concat, [1]]
#   - [-1, 3, C2f, [512]]

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 4], 1, Concat, [1]]
#   - [-1, 3, C2f, [256]]

#   - [-1, 1, DWConv, [256, 3, 2]]
#   - [[-1, 12], 1, Concat, [1]]
#   - [-1, 3, C2f, [512]]

#   - [-1, 1, DWConv, [512, 3, 2]]
#   - [[-1, 9], 1, Concat, [1]]
#   - [-1, 3, C2f, [1024]]

#   - [[15, 18, 21], 1, Detect, [nc]]



# SEBlock
# backbone:
#   - [-1, 1, DWConv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, nn.BatchNorm2d, []]
#   - [-1, 1, nn.SiLU, []]
#   - [-1, 1, SEBlock, [64]] # Squeeze-and-Excitation Block
#   - [-1, 1, DWConv, [128, 3, 2]] # 1-P2/4
#   - [-1, 1, nn.BatchNorm2d, []]
#   - [-1, 1, nn.SiLU, []]
#   - [-1, 3, GhostC2f, [128, True]] # GhostC2f with residual connections
#   - [-1, 1, DWConv, [256, 3, 2]] # 3-P3/8
#   - [-1, 1, nn.BatchNorm2d, []]
#   - [-1, 1, nn.SiLU, []]
#   - [-1, 6, GhostC2f, [256, True]]
#   - [-1, 1, DWConv, [512, 3, 2]] # 5-P4/16
#   - [-1, 1, nn.BatchNorm2d, []]
#   - [-1, 1, nn.SiLU, []]
#   - [-1, 6, GhostC2f, [512, True]]
#   - [-1, 1, DWConv, [1024, 3, 2]] # 7-P5/32
#   - [-1, 1, nn.BatchNorm2d, []]
#   - [-1, 1, nn.SiLU, []]
#   - [-1, 3, GhostC2f, [1024, True]]
#   - [-1, 1, GhostSPPF, [1024, 5]] # 9: GhostSPPF

# PASS
# # DW + Ghost
# backbone:
#   # [from, repeats, module, args]
#   - [-1, 1, DWConv, [64, 3, 2]] # 0-P1/2: Depthwise Convolution for lightweight initial feature extraction
#   - [-1, 1, DWConv, [128, 3, 2]] # 1-P2/4: Depthwise Convolution for efficient downsampling
#   - [-1, 3, GhostC2fskip, [128, True]] # Use Ghost Convolutions in C2f for feature richness
#   - [-1, 1, DWConv, [256, 3, 2]] # 3-P3/8: Depthwise Convolution for efficient downsampling
#   - [-1, 6, GhostC2fskip, [256, True]] # Ghost Convolutions in C2f for lightweight feature extraction
#   - [-1, 1, DWConv, [512, 3, 2]] # 5-P4/16: Depthwise Convolution for downsampling
#   - [-1, 6, GhostC2fskip, [512, True]] # Ghost Convolutions in C2f for richer mid-level features
#   - [-1, 1, DWConv, [1024, 3, 2]] # 7-P5/32: Depthwise Convolution for efficient downsampling
#   - [-1, 3, GhostC2fskip, [1024, True]] # Ghost Convolutions for high-level features
#   - [-1, 1, GhostSPPF, [1024, 5]] # 9: Ghost Convolutions in SPPF for high-level feature aggregation


# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#   - [-1, 3, GhostC2f, [512]] # 12: Ghost Convolutions for lightweight feature processing

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#   - [-1, 3, GhostC2f, [256]] # 15: Ghost Convolutions for small-scale features (P3/8-small)

#   - [-1, 1, DWConv, [256, 3, 2]] # Depthwise Convolution for efficient downsampling
#   - [[-1, 12], 1, Concat, [1]] # cat head P4
#   - [-1, 3, GhostC2f, [512]] # 18: Ghost Convolutions for medium-scale features (P4/16-medium)

#   - [-1, 1, DWConv, [512, 3, 2]] # Depthwise Convolution for efficient downsampling
#   - [[-1, 9], 1, Concat, [1]] # cat head P5
#   - [-1, 3, GhostC2f, [1024]] # 21: Ghost Convolutions for large-scale features (P5/32-large)

#   - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)



# DW + Ghost + Attention
backbone:
  # [from, repeats, module, args]
  - [-1, 1, DWConv, [64, 3, 2]]  # 0-P1/2: Depthwise Convolution for lightweight initial feature extraction
  - [-1, 1, DWConv, [128, 3, 2]]  # 1-P2/4: Depthwise Convolution for efficient downsampling
  - [-1, 3, GhostC2fskip, [128, True]]  # Use Ghost Convolutions in C2f for feature richness
  - [-1, 1, SEBlock, [128]]  # Add SE Block to enhance channel-wise attention
  
  - [-1, 1, DWConv, [256, 3, 2]]  # 3-P3/8: Depthwise Convolution for efficient downsampling
  - [-1, 6, GhostC2fskip, [256, True]]  # Ghost Convolutions in C2f for lightweight feature extraction
  - [-1, 1, SEBlock, [256]]  # Add SE Block for mid-level feature refinement

  - [-1, 1, DWConv, [512, 3, 2]]  # 5-P4/16: Depthwise Convolution for downsampling
  - [-1, 6, GhostC2fskip, [512, True]]  # Ghost Convolutions in C2f for richer mid-level features
  - [-1, 1, SEBlock, [512]]  # Apply SE Block at P4 level
  
  - [-1, 1, DWConv, [1024, 3, 2]]  # 7-P5/32: Depthwise Convolution for efficient downsampling
  - [-1, 3, GhostC2fskip, [1024, True]]  # Ghost Convolutions for high-level features
  - [-1, 1, GhostSPPF, [1024, 5]]  # 9: Ghost Convolutions in SPPF for high-level feature aggregation
  - [-1, 1, SEBlock, [1024]]  # SE Block before final feature aggregation


head:
  - [-1, 1, nn.Upsample, [None, 2, "bilinear"]]
  - [[-1, 6], 1, Concat, [1]]  # cat backbone P4
  - [-1, 3, GhostC2f, [512]]  # 12: Ghost Convolutions for lightweight feature processing
  - [-1, 1, CBAM, [512]]  # Apply CBAM before moving to smaller scales

  - [-1, 1, nn.Upsample, [None, 2, "bilinear"]]
  - [[-1, 4], 1, Concat, [1]]  # cat backbone P3
  - [-1, 3, GhostC2f, [256]]  # 15: Ghost Convolutions for small-scale features (P3/8-small)
  - [-1, 1, CBAM, [256]]  # Apply CBAM for refined small-scale features

  - [-1, 1, DWConv, [256, 3, 2]]  # Depthwise Convolution for efficient downsampling
  - [[-1, 12], 1, Concat, [1]]  # cat head P4
  - [-1, 3, GhostC2f, [512]]  # 18: Ghost Convolutions for medium-scale features (P4/16-medium)
  - [-1, 1, CBAM, [512]]  # Apply CBAM for better feature fusion

  - [-1, 1, DWConv, [512, 3, 2]]  # Depthwise Convolution for efficient downsampling
  - [[-1, 9], 1, Concat, [1]]  # cat head P5
  - [-1, 3, GhostC2f, [1024]]  # 21: Ghost Convolutions for large-scale features (P5/32-large)
  - [-1, 1, CBAM, [1024]]  # Apply CBAM for better large-object detection

  - [[15, 18, 21], 1, Detect, [nc]]  # Detect(P3, P4, P5)


# lightweight and fast model
# Backbone:
# Use RepVGGDW for efficient convolutions.
# Use C3Ghost for lightweight feature extraction.

# Head:
# Use DFL for improved localization.

# backbone:
#   - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2
#   - [-1, 1, RepVGGDW, [32]]  # 1-P2/4
#   - [-1, 3, C3Ghost, [128, True]]  # 2: C3Ghost
#   - [-1, 1, RepVGGDW, [256]]  # 3-P3/8
#   - [-1, 6, C3Ghost, [256, True]]  # 4: C3Ghost
#   - [-1, 1, RepVGGDW, [512]]  # 5-P4/16
#   - [-1, 6, C3Ghost, [512, True]]  # 6: C3Ghost
#   - [-1, 1, RepVGGDW, [1024]]  # 7-P5/32
#   - [-1, 3, C3Ghost, [1024, True]]  # 8: C3Ghost
#   - [-1, 1, SPPF, [1024, 5]]  # 9: SPPF

# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample
#   - [[-1, 6], 1, Concat, [1]]  # cat backbone P4
#   - [-1, 3, C3Ghost, [512]]  # 12: C3Ghost
#   - [-1, 1, DFL, [512]]  # Add DFL

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample
#   - [[-1, 4], 1, Concat, [1]]  # cat backbone P3
#   - [-1, 3, C3Ghost, [256]]  # 15: C3Ghost
#   - [-1, 1, DFL, [256]]  # Add DFL

#   # Fixed DWConv layers to match input channels
#   - [-1, 1, DWConv, [256, 3, 2]]  # Depthwise Convolution (Input 256)
#   - [[-1, 12], 1, Concat, [1]]  # cat head P4
#   - [-1, 3, C3Ghost, [512]]  # 18: C3Ghost
#   - [-1, 1, DFL, [512]]  # Add DFL

#   - [-1, 1, DWConv, [512, 3, 2]]  # Depthwise Convolution (Input 512)
#   - [[-1, 9], 1, Concat, [1]]  # cat head P5
#   - [-1, 3, C3Ghost, [1024]]  # 21: C3Ghost
#   - [-1, 1, DFL, [1024]]  # Add DFL

#   - [[15, 18, 21], 1, Detect, [nc]]  # Detect(P3, P4, P5)





# high-accuracy model
# Backbone:
  # Use CBAM for channel and spatial attention.
  # Use ELAN1 for efficient feature aggregation.

# Head:
  # Use ContrastiveHead for better feature discrimination.
  # Use PSA for spatial attention.

# backbone:
#   - [-1, 1, DWConv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, DWConv, [128, 3, 2]] # 1-P2/4
#   - [-1, 3, ELAN1, [128]] # 2: ELAN1
#   - [-1, 1, CBAM, [128]] # Add CBAM
#   - [-1, 1, DWConv, [256, 3, 2]] # 3-P3/8
#   - [-1, 6, ELAN1, [256]] # 4: ELAN1
#   - [-1, 1, CBAM, [256]] # Add CBAM
#   - [-1, 1, DWConv, [512, 3, 2]] # 5-P4/16
#   - [-1, 6, ELAN1, [512]] # 6: ELAN1
#   - [-1, 1, CBAM, [512]] # Add CBAM
#   - [-1, 1, DWConv, [1024, 3, 2]] # 7-P5/32
#   - [-1, 3, ELAN1, [1024]] # 8: ELAN1
#   - [-1, 1, CBAM, [1024]] # Add CBAM
#   - [-1, 1, SPPF, [1024, 5]] # 9: SPPF

# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # Upsample
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#   - [-1, 3, C3Ghost, [512]] # 12: C3Ghost
#   - [-1, 1, ContrastiveHead, [512]] # Add ContrastiveHead

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # Upsample
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#   - [-1, 3, C3Ghost, [256]] # 15: C3Ghost
#   - [-1, 1, ContrastiveHead, [256]] # Add ContrastiveHead

#   - [-1, 1, DWConv, [256, 3, 2]] # Depthwise Convolution
#   - [[-1, 12], 1, Concat, [1]] # cat head P4
#   - [-1, 3, C3Ghost, [512]] # 18: C3Ghost
#   - [-1, 1, PSA, [512]] # Add PSA

#   - [-1, 1, DWConv, [512, 3, 2]] # Depthwise Convolution
#   - [[-1, 9], 1, Concat, [1]] # cat head P5
#   - [-1, 3, C3Ghost, [1024]] # 21: C3Ghost
#   - [-1, 1, PSA, [1024]] # Add PSA

#   - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)


# Balanced Model (Accuracy + Speed)
# Backbone:
  # Use C3Ghost for lightweight feature extraction.
  # Use CBAM for attention.

# Head:
  # Use DFL for localization.
  # Use PSA for spatial attention.


# backbone:
#   - [-1, 1, DWConv, [64, 3, 2]] # 0-P1/2
#   - [-1, 1, DWConv, [128, 3, 2]] # 1-P2/4
#   - [-1, 3, C3Ghost, [128, True]] # 2: C3Ghost
#   - [-1, 1, CBAM, [128]] # Add CBAM
#   - [-1, 1, DWConv, [256, 3, 2]] # 3-P3/8
#   - [-1, 6, C3Ghost, [256, True]] # 4: C3Ghost
#   - [-1, 1, CBAM, [256]] # Add CBAM
#   - [-1, 1, DWConv, [512, 3, 2]] # 5-P4/16
#   - [-1, 6, C3Ghost, [512, True]] # 6: C3Ghost
#   - [-1, 1, CBAM, [512]] # Add CBAM
#   - [-1, 1, DWConv, [1024, 3, 2]] # 7-P5/32
#   - [-1, 3, C3Ghost, [1024, True]] # 8: C3Ghost
#   - [-1, 1, CBAM, [1024]] # Add CBAM
#   - [-1, 1, SPPF, [1024, 5]] # 9: SPPF

# head:
#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # Upsample
#   - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#   - [-1, 3, C3Ghost, [512]] # 12: C3Ghost
#   - [-1, 1, DFL, [512]] # Add DFL

#   - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # Upsample
#   - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#   - [-1, 3, C3Ghost, [256]] # 15: C3Ghost
#   - [-1, 1, DFL, [256]] # Add DFL

#   - [-1, 1, DWConv, [256, 3, 2]] # Depthwise Convolution
#   - [[-1, 12], 1, Concat, [1]] # cat head P4
#   - [-1, 3, C3Ghost, [512]] # 18: C3Ghost
#   - [-1, 1, PSA, [512]] # Add PSA

#   - [-1, 1, DWConv, [512, 3, 2]] # Depthwise Convolution
#   - [[-1, 9], 1, Concat, [1]] # cat head P5
#   - [-1, 3, C3Ghost, [1024]] # 21: C3Ghost
#   - [-1, 1, PSA, [1024]] # Add PSA

#   - [[15, 18, 21], 1, Detect, [nc]] # Detect(P3, P4, P5)
